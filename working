from flask import Blueprint, request
from flask_restful import Api, Resource, marshal_with, fields
from app.models import Role, User
from app import db
from werkzeug.security import generate_password_hash

main = Blueprint('main', __name__)
api = Api(main)

user_fields = {
    'id': fields.Integer,
    'First_name': fields.String,
    'last_name': fields.String,
    'password': fields.String,
    'email': fields.String,
    'role_id': fields.Integer,
    'contact_number': fields.String,
    'farm_location': fields.String,
    'status': fields.String,
}

class RegisterUser(Resource):
    @marshal_with(user_fields)
    def post(self):
        data = request.json

        role_id = 2  # Default role ID
        role = Role.query.get(role_id)
        hashed_password = generate_password_hash(data.get('password'))

        if not role:
            return {'message': 'Role does not exist'}, 400

        new_user = User(
            First_name=data.get('First_name'),
            last_name=data.get('last_name'),
            password=hashed_password,
            email=data.get('email'),
            role=role,
            role_id=role_id,
            contact_number=data.get('contact_number'),
            farm_location=data.get('farm_location'),
            status=data.get('status', 'Active')
        )

        try:
            db.session.add(new_user)
            db.session.commit()
            return new_user, 201
        except Exception as e:
            db.session.rollback()
            return {'message': f'Failed to register user: {str(e)}'}, 500

main.add_url_rule('/register', view_func=RegisterUser.as_view('register_user'))



prediction_bp = Blueprint('prediction', __name__)
# prediction_api = Api(prediction_bp)

# class CropPredictionResource(Resource):
#     def get(self, user_id):
#         user_soil_params = get_soil_parameters_by_user(user_id)

#         # Gather soil parameters for prediction
#         feature_list = []
#         for param in user_soil_params:
#             features = [
#                 param.nitrogen_level,
#                 param.phosphorus_level,
#                 param.potassium_level,
#                 param.temperature,
#                 param.humidity,
#                 param.ph_level,
#                 param.rainfall
#             ]
#             feature_list.append(features)

#         # Make predictions using your ML model
#         predictions = ml_model.predict(feature_list)

#         # Output the predicted crops
#         crop_names = []  # List to store predicted crop names
#         for prediction in predictions:
#             # Assuming `prediction` is an index or code indicating the crop
#             # Replace this with your actual logic to map indices to crop names
#             crop_name = map_index_to_crop_name(prediction)
#             crop_names.append(crop_name)

#         return {'predicted_crops': crop_names}, 200

# # Add the endpoint to the API
# prediction_api.add_resource(CropPredictionResource, '/predict-crop/<int:user_id>')
# class UserReviewsResources(Resource):
#     def get(self, user_id):
#         user_review_params = get_all_user_reviews


# yashvi.bhadania@strathmore.edu


